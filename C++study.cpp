#include<iostream>
#include<string>
using namespace std;

//内存分区模型

/*
1.代码区：存放函数体的二进制代码，由操作系统进行管理
2.全局区：存放全局变量和静态变量以及常量
3.栈区：由编译器自动分配释放，存放函数的参数值，局部变量
4.堆区：由程序员分配和释放，若程序员不释放，程序结束时有操作系统回收
*/

//内存四区意义：不同区域存放的数据，赋予不同的生命周期，给与我们更大的灵活编程

//程序运行前
/*
在程序编译后，生成了exe可执行程序，未执行程序前分为两个区域
代码区：存放CPU执行的机器指令
		代码区是共享的。共享的目的是对于频繁被执行的程序，只需要在内存中有一份代码即可
		代码区是只读的。使其只读的原因是防止程序意外的修改了它的指令

全局区：存放全局变量和静态变量
		全局区还包含了常量区，字符串常量和其他常量也存放在此
		该区域的数据在程序结束后由操作系统释放
*/


//在函数体外创建全局变量
int g_a = 10;
int g_b = 10;

//const修饰的全局变量，全局常量
const int c_a = 10;

int main()
{
	//创建普通的局部变量(函数体内的变量)
	int a = 10;
	int b = 10;
	cout << "局部变量a的地址为：" << (int)&a << endl;
	cout << "局部变量b的地址为：" << (int)&b << endl;

	cout << "全局变量a的地址为：" << (int)&g_a << endl;
	cout << "全局变量b的地址为：" << (int)&g_b << endl;

	//静态变量 在普通变量的前面+static 
	//也存放在全局区中
	static int s_a = 10;
	static int s_b = 10;
	cout << "静态变量a的地址为：" << (int)&s_a << endl;
	cout << "静态变量b的地址为：" << (int)&s_b << endl;

	//常量
	//字符串常量(存放在全局区)
	cout << "字符串常量的地址为：" << (int)&"Hello World!" << endl;

	//const修饰的常量
	//const 修饰的全局变量
	cout << "const修饰的全局常量地址为：" << (int)&c_a << endl;

	//const修饰的局部变量
	const int c2_a = 10;
	cout << "const修饰的局部常量地址为：" << (int)&c2_a << endl;
	system("pause");
	return 0;
}

